;;;  Name:
;;;  Email:
;;;  Total 5.25/6

;;; Q1. --- Done !!!

;;; --- Your code here --- below
;;;
(fact (add-to-all ?e (?lst . ()) ((?e . ?lst))))
(fact (add-to-all ?e (?listfirst . ?listrest) ((?e . ?listfirst) . ?something))
      (add-to-all ?e ?listrest ?something))
;;;
;;; --- Your code here --- above

(query (add-to-all a ((b) (c d)) ((a b) (a c d))))
; expect Success!
(query (add-to-all a ((b c) (b) (foo)) ?what))
; expect Success! ; what: ((a b c) (a b) (a foo))
(query (add-to-all ?what ((c) (d e) ()) ((b c) (b d e) (b))))
; expect Success! ; what: b
(query (add-to-all ?what ?list ((b c) (d e) (b))))
; expect Failed.



;;; Q2. --- Done 1/2 !
;;; please see http://www.dailyfreecode.com/code/prolog-find-sublists-given-list-3152.aspx

(fact (append () ?a ?a))
(fact (append (?x . ?r) ?b (?x . ?c))
      (append ?r ?b ?c))

;;; --- Your code here --- below
;;;
(fact (sublists () ()))
(fact (sublists (?fst . ?rest) (?fst . ?sub))
      (sublists ?rest ?sub))
(fact (sublists (?_ . ?rest) ?sub)
      (sublists ?rest ?sub))
;;;
;;; --- Your code here --- above

(query (sublists (1 2 3) ?subs))
; expect Success! ; subs: (() (3) (2) (2 3) (1) (1 3) (1 2) (1 2 3))



;;; Q3. --- Done !!!

(fact (fruits apple banana cherry date elderberry fig guava))

;;; --- Your code here --- below
;;;
(fact (suffix ?x ?x))
(fact (suffix ?x (?f . ?list))
      (suffix ?x ?list))

(fact (fruits-tail . ?x)
      (fruits . ?fs)
      (suffix ?x ?fs))

(fact (fruits-tail ?x . ?y)
      (fruits . ?fs)
      (suffix (?x . ?y) ?fs))

(fact (fruits-tail ?x ?y ?z)
      (fruits . ?fs)
      (suffix (?x ?y ?z) ?fs))
;;;
;;; --- Your code here --- above

(query (fruits-tail date elderberry fig guava))
; expect Success!
(query (fruits-tail banana . ?after-banana))
; expect Success! ; after-banana: (cherry date elderberry fig guava)
(query (fruits-tail ?e fig guava))
; expect Success! ; e: elderberry



;;; Q4. --- Done! 5/5
(fact (prefix () ?s))
(fact (prefix (?first . ?p) (?first . ?s))
      (prefix ?p ?s))

;;; --- Your code here --- below
;;;
;;;(fact (fruits apple banana cherry date elderberry fig guava))

;;;(fact (append () ?a ?a))
(fact (append (?a) (?b . ?r) (?a ?b . ?r)))
(fact (append (?x . ?r) ?b (?x . ?c))
      (append ?r ?b ?c))

(fact (prefix () ?s))
(fact (prefix (?first . ?p) (?first . ?s))
      (prefix ?p ?s))

(fact (suffix ?x ?x))
(fact (suffix ?x (?f . ?list)) 
      (suffix ?x ?list))

(fact (sublist ?xs ?ys)
      (suffix  ?xs ?ps)
      (prefix  ?ps ?ys))

(fact (fruit-range ?before ?after ?between)
      (fruits . ?fs)
      (append (?before) ?between ?new)
      (append ?new      (?after) ?newer)
      (sublist ?newer ?fs))
;;;
;;; --- Your code here --- above

(query (fruit-range cherry guava (date elderberry fig)))
; expect Success!
(query (fruit-range cherry elderberry date))
; expect Failed.
(query (fruit-range cherry elderberry ?between))
; expect Success! ; between: (date)
(query (fruit-range cherry date ()))
; expect Failed.
(query (fruit-range banana fig ?between))
; expect Success! ; between: (cherry date elderberry)



;;; Q5. --- Done !!!

(fact (increment 1 2))
(fact (increment 2 3))
(fact (increment 3 4))
(fact (increment 4 5))
(fact (increment 5 6))
(fact (increment 6 7))
(fact (increment 7 8))
(fact (increment 8 9))

;;; --- Your code here --- below
;;;
(fact (max ?x ?x ?x))
(fact (max ?x ?y ?x) (increment ?xx ?x) (max ?xx ?y ?xx))
(fact (max ?a ?b ?b) (increment ?bb ?b) (max ?a ?bb ?bb))
;;;
;;; --- Your code here --- above

(query (max 2 4 4) (max 4 2 4) (max 4 4 4))
; expect Success!
(query (max 3 ?x ?x) (max ?x 5 5))
; expect Success! ; x: 3 ; x: 4 ; x: 5
(query (max 1 2 3))
; expect Failed.



;;; Q6. --- Done (2.75/3=) !!!

(fact (add       1 ?x ?x+1)
      (increment ?x ?x+1))
(fact (add       ?x+1 ?y ?z+1)
      (increment ?x ?x+1)
      (increment ?z ?z+1)
      (add       ?x ?y ?z))

;;; --- Your code here --- below
;;;
(fact (reduce-to ?value ?fun . (?x . (?y . ())))
      (?fun ?x ?y ?value))
or
(fact (reduce-to ?x ?fun . (?x . ())))

(fact (reduce-to ?value  ?fun . (?fst . ?rest))
      (reduce-to ?temp   ?fun . ?rest)
      (?fun ?fst ?temp ?value))
;;;
;;; --- Your code here --- above

(query (reduce-to ?value add 1 1 2 3))
; expect Success! ; value: 7
(query (reduce-to ?value max 1 2 4 1 3 1))
; expect Success! ; value: 4
(query (reduce-to 4 add . ?addends))
; expect Success! ; addends: (1 3) ; addends: (2 2) ; addends: (3 1) ; addends: (1 1 2) ; addends: (1 2 1) ; addends: (1 1 1 1) ; addends: (2 1 1)


